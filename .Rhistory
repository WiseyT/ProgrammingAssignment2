?nrow
corr <- function(directory, threshold = 0){
filelist <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- numeric()
for (i in 1:332){
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))}
if (nobs > threshold){
good <- complete.cases(data)
fulldata <- na.omit(data[good,][1:length(data)])
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations <- c(correlations, corris)
}
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
filelist <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- numeric()
for (i in 1:332){
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))}
if (nobs > threshold){
good <- complete.cases(data)
fulldata <- na.omit(data[good,][1:length(data)])
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations <- c(correlations, corris)
}
return(correlations)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
filelist <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- vector("numeric", length = 0)
for (i in 1:332){
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))}
if (nobs > threshold){
good <- complete.cases(data)
fulldata <- na.omit(data[good,][1:length(data)])
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations <- c(correlations, corris)
}
return(correlations)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
filelist <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- vector("numeric", length = 0)
for (i in 1:332){
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))}
if (nobs > threshold){
good <- complete.cases(data)
fulldata <- na.omit(data[good,][1:length(data)])
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate, use = fulldata)
correlations <- c(correlations, corris)
}
return(correlations)
}
source('~/Functions/corr.R')
cr <- corr("specdata", 150)
cr
getwd()
warnings()
debugSource('~/Functions/corr.R')
cr <- corr("specdata", 150)
nobs
threshold
cr <- corr("specdata", 150)
warnings()
cr <- corr("specdata", 150)
warnings
warnings()
cor
corr
corr <- function(directory, threshold = 0){
files_full <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- numeric()
for (i in 1:length(files_full)){
data <- read.csv(files_full[i])
nobs <- c(nobs, sum(complete.cases(data)))
if (nobs[i] > threshold){
good <- complete.cases(data)
# fulldata <- na.omit(data[good,][1:length(data)])
fulldata <- data[good,]
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations[i] <- c(correlations, corris)
}
}
return(correlations)
}
cr <- corr("specdata", 150)
corr\
corr
wanrings()
corr <- function(directory, threshold = 0){
files_full <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- numeric()
for (i in 1:length(files_full)){
data <- read.csv(files_full[i])
nobs <- c(nobs, sum(complete.cases(data)))
if (nobs[i] > threshold){
good <- complete.cases(data)
# fulldata <- na.omit(data[good,][1:length(data)])
fulldata <- data[good,]
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations[i] <- c(correlations, corris)
}
}
return(correlations)
}
corr
cr <- corr("specdata", 150)
warnings()
debugSource('~/Functions/corr.R')
cr <- corr("specdata", 10)
nobs
threshold
fulldata
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
corris
correlations[i] <- c(correlations, corris)
correlations
source('~/Functions/corr.R')
corr <- function(directory, threshold = 0){
files_full <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- numeric()
for (i in 1:length(files_full)){
data <- read.csv(files_full[i])
nobs <- c(nobs, sum(complete.cases(data)))
if (nobs[i] > threshold){
good <- complete.cases(data)
# fulldata <- na.omit(data[good,][1:length(data)])
fulldata <- data[good,]
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations <- c(correlations, corris)
}
}
return(correlations)
}
cr <- corr("specdata", 10)
cr
getwd()
corr <- function(directory, threshold = 0){
files_full <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- numeric()
for (i in 1:length(files_full)){
data <- read.csv(files_full[i])
nobs <- c(nobs, sum(complete.cases(data)))
if (nobs[i] > threshold){
good <- complete.cases(data)
# fulldata <- na.omit(data[good,][1:length(data)])
fulldata <- data[good,]
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations <- c(correlations, corris)
}
}
return(correlations)
}
cr <- corr("specdata", 150)
head(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
corr <- function(directory, threshold = 0){
files_full <- list.files("specdata", full.names = TRUE, pattern = ".csv")
nobs <- numeric()
correlations <- numeric()
for (i in 1:length(files_full)){
data <- read.csv(files_full[i])
nobs <- c(nobs, sum(complete.cases(data)))
if (nobs[i] > threshold){
good <- complete.cases(data)
fulldata <- data[good,]
corris <- cor(x = fulldata$sulfate, y = fulldata$nitrate)
correlations <- c(correlations, corris)
}
}
return(correlations)
}
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc(use, "nobs"))
print(cc[use, "nobs"]))
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
swirl()
library(swirl)
ls
ls()
rm(list = ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris)
data("iris")
?iris
head(iris)
iris
tappy(iris$Sepal.Length, iris$Species = virginia, mean)
tappy(iris$Sepal.Length, iris$virginia, mean)
tapply(iris$Sepal.Length, iris$virginia, mean)
library(datasets)
data("iris")
?iris
head(iris)
iris
viginica <- iris[101:150,]
viginica
tapply(virginica$Sepal.Length, mean)
SL <- viginica[viginica$Sepal.Length]
tapply(iris$Sepal.Length, iris[viginica,], mean)
class(iris)
lapply(iris, class)
mean(viginica$Sepal.Length)
library(datasets)
data(mtcars)
head(mtcars)
nrow(mtcars)
?with
debug(ls)
ls
library(datasets)
data("mtcars")
head(mtcars)
table(mtcars$cyl)
cyl_table <- table(mtcars$cyl)
tapply(mtcars$cyl = 4, mean)
cyls <- split(mtcars, mtcars$cyl)
lapply(cyls, function(x), colMeans(x[, hp]))
lapply(cyls, function(x) colMeans(x[, hp]))
cyls
mean(cyls$`4`)
mean(cyls$`4`, mean)
mean(cyls$`4`, cyls$hp, mean)
apply(cyls[,4],2,mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
n
?solve
\
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x[[getinv()]]
if(!is.null(inv)) {
message("returning cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinv(inv)
inv
}
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
Matrix1 <- matrix(c(0,1,2,3,4,5,6,7,8), nrow = 3, ncol = 3, byrow = TRUE)
Matrix1
makeCacheMatrix(Matrix1)
MakeCache <- makeCacheMatrix(Matrix1)
cacheSolve(MakeCache)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x[[getinv]]()
if(!is.null(inv)) {
message("returning cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinv(inv)
inv
}
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
MakeCache <- makeCacheMatrix(Matrix1)
cacheSolve(MakeCache)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x[[getinv]]()
if(!is.null(inv)) {
message("returning cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinv(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x[[getinv]]()
if(!is.null(inv)) {
message("returning cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinv(inv)
inv
}
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
MakeCache <- makeCacheMatrix(Matrix1)
cacheSolve(MakeCache)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("returning cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinv(inv)
inv
}
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
getwd()
setwd("C:/Users/tylie/ProgrammingAssignment2")
getwd()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("returning cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinv(inv)
inv
}
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
MakeCache <- makeCacheMatrix(Matrix1)
cacheSolve(MakeCache)
library(matlib)
?inverse
??inverse
?mean
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(Matrix1)
cacheSolve(m2)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function (inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("returning cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
cacheSolve(MakeCache)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
I2
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
n1
m1 %*% n1
solve(m1)
solve(Matrix1)
solve(n1)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/tylie/ProgrammingAssignment2/cachematrix.R')
